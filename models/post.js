/**
 * Created by asus on 2017/ / .
 * Worker hejian .
 * Location zdh_lab .
 * content
 * 业务逻辑：
 * 1.连数据库、2.建构造函数、3.找数据、4.插数据
 * 构造函数：@param email @param post @param time
 * 找数据：@param email  @param callback
 * 开数据库(@param err @param db)-->找哪个数据库文件(@param 文件 @param err @param collection)-->找哪个数据-->找到的数据转成数组并且遍历传入构造函数-->把构造函数存入数组返回给回调函数
 * 插数据: @param callback      
 * 插哪个数据-->开数据库(@param err @param db)-->找哪个数据库文件(@param 文件 @param err @param collection)-->根据谁添加索引-->插入数据库(数据,@param err)
 */

//连数据库
var  mongodb = require('mongodb');
var  server  = new mongodb.Server('123.206.56.83', 27017, {auto_reconnect:true});
var  db = new mongodb.Db('mydb', server, {safe:true});

function Post(email,post,time){
	this.email=email;
	this.post=post;
	//如果时间为空，就设置当前时间
	if(time){
		this.time=time;
	}else{
		this.time=new Date();
	}
}
//找
Post.find=function (email,callback){
	//打开数据库
	db.open(function (err,db){
		if(err){
			db.close();
			return callback(err);
		}
			//找文件
		db.collection("posts1",function(err,collection){
			if(err){
				db.close();
				return callback(err);
			}
			//找到posts文件后，要找当email存在时，含有email属性名的的信息
			var query={};
			if(email){
				query.email=email;
			}
			//按照倒叙时间查表，并且转成数组
			collection.find(query).sort({time:-1}).toArray(function (err,docs){
				db.close();//找到后要关闭数据库
				var userdatas=[];   //把收集到的内容遍历出来然后push到一个数组里面
				docs.forEach(function (doc,index){
					var post =new Post(
						doc.email,   //邮件账号
						doc.post,	 //发送的内容	
						doc.time	 //发送的时间
					)
					userdatas.push(post); //push
				})
				callback(null,userdatas); //返还给回调函数
			})		
		})
	})
}
module.exports=Post;

//插
Post.prototype.save=function (callback){
	//插哪个数据
	var userdatas={
		email:this.email,
		post:this.post,
		time:this.time
	}
	//开数据库-->找哪个数据库文件-->根据谁添加索引-->插入数据库
	db.open(function (err,db){
	  if(err){
			return callback(err);
		}
	  //找文件
	  db.collection("posts1",function (err,collection){
			if(err){
				db.close();
				return callback(err);
			}
			//添索引
		  //	collection.ensureIndex({"email":1});
			//插数据
			collection.insert(userdatas,{safe:true},function (err){
				db.close();
				callback(err);
			})
		})
	})
}
